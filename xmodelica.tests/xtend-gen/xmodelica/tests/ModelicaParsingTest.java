/**
 * generated by Xtext 2.9.2
 */
package xmodelica.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import xmodelica.modelica.StoredDefinition;
import xmodelica.tests.ModelicaInjectorProvider;

@RunWith(XtextRunner.class)
@InjectWith(ModelicaInjectorProvider.class)
@SuppressWarnings("all")
public class ModelicaParsingTest {
  @Inject
  private ParseHelper<StoredDefinition> parser;
  
  @Test
  public void within() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("within Blah.Blah;");
      _builder.newLine();
      _builder.append("class Ball");
      _builder.newLine();
      _builder.append("end Ball;");
      _builder.newLine();
      final StoredDefinition result = this.parser.parse(_builder);
      Assert.assertNotNull(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void components() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("class Ball");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Real a=1;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Bool c=2;");
      _builder.newLine();
      _builder.append("end Ball;");
      _builder.newLine();
      final StoredDefinition result = this.parser.parse(_builder);
      Assert.assertNotNull(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void equation() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("class Ball");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Real a;");
      _builder.newLine();
      _builder.append("equation");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("a = 1;");
      _builder.newLine();
      _builder.append("end Ball;");
      _builder.newLine();
      final StoredDefinition result = this.parser.parse(_builder);
      Assert.assertNotNull(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void derivative() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("class Ball");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Real a;");
      _builder.newLine();
      _builder.append("equation");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("der(a) = 1;");
      _builder.newLine();
      _builder.append("end Ball;");
      _builder.newLine();
      final StoredDefinition result = this.parser.parse(_builder);
      Assert.assertNotNull(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
