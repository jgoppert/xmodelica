/*
 * generated by Xtext 2.9.2
 */
package xmodelica.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import xmodelica.services.ModelicaGrammarAccess;

@SuppressWarnings("all")
public class ModelicaSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ModelicaGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ComponentReference_FullStopKeyword_0_q;
	protected AbstractElementAlias match_Composition___ExternalKeyword_2_0_SemicolonKeyword_2_4__q;
	protected AbstractElementAlias match_ElementModicationOrReplaceable_EachKeyword_0_q;
	protected AbstractElementAlias match_ElementModicationOrReplaceable_ElementRedeclaration_ElementReplaceable___EachKeyword_0_q_FinalKeyword_1_q_ReplaceableKeyword_0_q___or___RedeclareKeyword_0_EachKeyword_1_q_FinalKeyword_2_q_ReplaceableKeyword_0_q__;
	protected AbstractElementAlias match_ElementModicationOrReplaceable_FinalKeyword_1_q;
	protected AbstractElementAlias match_ElementRedeclaration_EachKeyword_1_q;
	protected AbstractElementAlias match_ElementRedeclaration_FinalKeyword_2_q;
	protected AbstractElementAlias match_ElementReplaceable_ReplaceableKeyword_0_q;
	protected AbstractElementAlias match_Element_FinalKeyword_2_1_q;
	protected AbstractElementAlias match_Element_InnerKeyword_2_2_q;
	protected AbstractElementAlias match_Element_OuterKeyword_2_3_q;
	protected AbstractElementAlias match_Element_RedeclareKeyword_2_0_q;
	protected AbstractElementAlias match_Element_ReplaceableKeyword_2_4_1_0_q;
	protected AbstractElementAlias match_Factor_CircumflexAccentKeyword_1_1_0_or_FullStopCircumflexAccentKeyword_1_1_1;
	protected AbstractElementAlias match_FunctionCall_DerKeyword_0_1_or_InitialKeyword_0_2;
	protected AbstractElementAlias match_IfEquation_ElseKeyword_5_0_q;
	protected AbstractElementAlias match_IfStatement_ElseKeyword_5_0_q;
	protected AbstractElementAlias match_ImportClause_CommaKeyword_1_1_1_0_q;
	protected AbstractElementAlias match_ImportClause___CommaKeyword_1_1_1_0_q_AsteriskKeyword_1_1_1_1_0__q;
	protected AbstractElementAlias match_OutputExpressionList_CommaKeyword_2_0_a;
	protected AbstractElementAlias match_OutputExpressionList_CommaKeyword_2_0_p;
	protected AbstractElementAlias match_ShortClassDefinition_ColonKeyword_3_1_2_1_q;
	protected AbstractElementAlias match_Statement_BreakKeyword_0_2_or_ReturnKeyword_0_3;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ModelicaGrammarAccess) access;
		match_ComponentReference_FullStopKeyword_0_q = new TokenAlias(false, true, grammarAccess.getComponentReferenceAccess().getFullStopKeyword_0());
		match_Composition___ExternalKeyword_2_0_SemicolonKeyword_2_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCompositionAccess().getExternalKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getCompositionAccess().getSemicolonKeyword_2_4()));
		match_ElementModicationOrReplaceable_EachKeyword_0_q = new TokenAlias(false, true, grammarAccess.getElementModicationOrReplaceableAccess().getEachKeyword_0());
		match_ElementModicationOrReplaceable_ElementRedeclaration_ElementReplaceable___EachKeyword_0_q_FinalKeyword_1_q_ReplaceableKeyword_0_q___or___RedeclareKeyword_0_EachKeyword_1_q_FinalKeyword_2_q_ReplaceableKeyword_0_q__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getElementRedeclarationAccess().getRedeclareKeyword_0()), new TokenAlias(false, true, grammarAccess.getElementRedeclarationAccess().getEachKeyword_1()), new TokenAlias(false, true, grammarAccess.getElementRedeclarationAccess().getFinalKeyword_2()), new TokenAlias(false, true, grammarAccess.getElementReplaceableAccess().getReplaceableKeyword_0())), new GroupAlias(false, false, new TokenAlias(false, true, grammarAccess.getElementModicationOrReplaceableAccess().getEachKeyword_0()), new TokenAlias(false, true, grammarAccess.getElementModicationOrReplaceableAccess().getFinalKeyword_1()), new TokenAlias(false, true, grammarAccess.getElementReplaceableAccess().getReplaceableKeyword_0())));
		match_ElementModicationOrReplaceable_FinalKeyword_1_q = new TokenAlias(false, true, grammarAccess.getElementModicationOrReplaceableAccess().getFinalKeyword_1());
		match_ElementRedeclaration_EachKeyword_1_q = new TokenAlias(false, true, grammarAccess.getElementRedeclarationAccess().getEachKeyword_1());
		match_ElementRedeclaration_FinalKeyword_2_q = new TokenAlias(false, true, grammarAccess.getElementRedeclarationAccess().getFinalKeyword_2());
		match_ElementReplaceable_ReplaceableKeyword_0_q = new TokenAlias(false, true, grammarAccess.getElementReplaceableAccess().getReplaceableKeyword_0());
		match_Element_FinalKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getElementAccess().getFinalKeyword_2_1());
		match_Element_InnerKeyword_2_2_q = new TokenAlias(false, true, grammarAccess.getElementAccess().getInnerKeyword_2_2());
		match_Element_OuterKeyword_2_3_q = new TokenAlias(false, true, grammarAccess.getElementAccess().getOuterKeyword_2_3());
		match_Element_RedeclareKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getElementAccess().getRedeclareKeyword_2_0());
		match_Element_ReplaceableKeyword_2_4_1_0_q = new TokenAlias(false, true, grammarAccess.getElementAccess().getReplaceableKeyword_2_4_1_0());
		match_Factor_CircumflexAccentKeyword_1_1_0_or_FullStopCircumflexAccentKeyword_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getFactorAccess().getCircumflexAccentKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getFactorAccess().getFullStopCircumflexAccentKeyword_1_1_1()));
		match_FunctionCall_DerKeyword_0_1_or_InitialKeyword_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getFunctionCallAccess().getDerKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getFunctionCallAccess().getInitialKeyword_0_2()));
		match_IfEquation_ElseKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getIfEquationAccess().getElseKeyword_5_0());
		match_IfStatement_ElseKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
		match_ImportClause_CommaKeyword_1_1_1_0_q = new TokenAlias(false, true, grammarAccess.getImportClauseAccess().getCommaKeyword_1_1_1_0());
		match_ImportClause___CommaKeyword_1_1_1_0_q_AsteriskKeyword_1_1_1_1_0__q = new GroupAlias(false, true, new TokenAlias(false, true, grammarAccess.getImportClauseAccess().getCommaKeyword_1_1_1_0()), new TokenAlias(false, false, grammarAccess.getImportClauseAccess().getAsteriskKeyword_1_1_1_1_0()));
		match_OutputExpressionList_CommaKeyword_2_0_a = new TokenAlias(true, true, grammarAccess.getOutputExpressionListAccess().getCommaKeyword_2_0());
		match_OutputExpressionList_CommaKeyword_2_0_p = new TokenAlias(true, false, grammarAccess.getOutputExpressionListAccess().getCommaKeyword_2_0());
		match_ShortClassDefinition_ColonKeyword_3_1_2_1_q = new TokenAlias(false, true, grammarAccess.getShortClassDefinitionAccess().getColonKeyword_3_1_2_1());
		match_Statement_BreakKeyword_0_2_or_ReturnKeyword_0_3 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementAccess().getBreakKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getReturnKeyword_0_3()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBasePrefixRule())
			return getBasePrefixToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getClassPrefixesRule())
			return getClassPrefixesToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDENTRule())
			return getIDENTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNameRule())
			return getNameToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * BasePrefix:
	 * 	TypePrefix
	 * ;
	 */
	protected String getBasePrefixToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * ClassPrefixes returns ecore::EString:
	 * 	'partial'?
	 * 	('class'
	 * 		| 'model'
	 * 		| 'operator'? 'record'
	 * 		| 'block'
	 * 		| 'expandable'? 'connector'
	 * 		| 'type'
	 * 		| 'package'
	 * 		| ('pure' | 'impure')? 'operator'? 'function'
	 * 		| 'operator'
	 * 	)
	 * ;
	 */
	protected String getClassPrefixesToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "class";
	}
	
	/**
	 * terminal IDENT returns ecore::EString:
	 * 	NONDIGIT ( DIGIT | NONDIGIT )* | Q_IDENT
	 * ;
	 */
	protected String getIDENTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "_";
	}
	
	/**
	 * Name:
	 * 	"."? IDENT ("." IDENT)*
	 * ;
	 */
	protected String getNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "_";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ComponentReference_FullStopKeyword_0_q.equals(syntax))
				emit_ComponentReference_FullStopKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Composition___ExternalKeyword_2_0_SemicolonKeyword_2_4__q.equals(syntax))
				emit_Composition___ExternalKeyword_2_0_SemicolonKeyword_2_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ElementModicationOrReplaceable_EachKeyword_0_q.equals(syntax))
				emit_ElementModicationOrReplaceable_EachKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ElementModicationOrReplaceable_ElementRedeclaration_ElementReplaceable___EachKeyword_0_q_FinalKeyword_1_q_ReplaceableKeyword_0_q___or___RedeclareKeyword_0_EachKeyword_1_q_FinalKeyword_2_q_ReplaceableKeyword_0_q__.equals(syntax))
				emit_ElementModicationOrReplaceable_ElementRedeclaration_ElementReplaceable___EachKeyword_0_q_FinalKeyword_1_q_ReplaceableKeyword_0_q___or___RedeclareKeyword_0_EachKeyword_1_q_FinalKeyword_2_q_ReplaceableKeyword_0_q__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ElementModicationOrReplaceable_FinalKeyword_1_q.equals(syntax))
				emit_ElementModicationOrReplaceable_FinalKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ElementRedeclaration_EachKeyword_1_q.equals(syntax))
				emit_ElementRedeclaration_EachKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ElementRedeclaration_FinalKeyword_2_q.equals(syntax))
				emit_ElementRedeclaration_FinalKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ElementReplaceable_ReplaceableKeyword_0_q.equals(syntax))
				emit_ElementReplaceable_ReplaceableKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Element_FinalKeyword_2_1_q.equals(syntax))
				emit_Element_FinalKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Element_InnerKeyword_2_2_q.equals(syntax))
				emit_Element_InnerKeyword_2_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Element_OuterKeyword_2_3_q.equals(syntax))
				emit_Element_OuterKeyword_2_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Element_RedeclareKeyword_2_0_q.equals(syntax))
				emit_Element_RedeclareKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Element_ReplaceableKeyword_2_4_1_0_q.equals(syntax))
				emit_Element_ReplaceableKeyword_2_4_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Factor_CircumflexAccentKeyword_1_1_0_or_FullStopCircumflexAccentKeyword_1_1_1.equals(syntax))
				emit_Factor_CircumflexAccentKeyword_1_1_0_or_FullStopCircumflexAccentKeyword_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionCall_DerKeyword_0_1_or_InitialKeyword_0_2.equals(syntax))
				emit_FunctionCall_DerKeyword_0_1_or_InitialKeyword_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfEquation_ElseKeyword_5_0_q.equals(syntax))
				emit_IfEquation_ElseKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfStatement_ElseKeyword_5_0_q.equals(syntax))
				emit_IfStatement_ElseKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImportClause_CommaKeyword_1_1_1_0_q.equals(syntax))
				emit_ImportClause_CommaKeyword_1_1_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImportClause___CommaKeyword_1_1_1_0_q_AsteriskKeyword_1_1_1_1_0__q.equals(syntax))
				emit_ImportClause___CommaKeyword_1_1_1_0_q_AsteriskKeyword_1_1_1_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OutputExpressionList_CommaKeyword_2_0_a.equals(syntax))
				emit_OutputExpressionList_CommaKeyword_2_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OutputExpressionList_CommaKeyword_2_0_p.equals(syntax))
				emit_OutputExpressionList_CommaKeyword_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ShortClassDefinition_ColonKeyword_3_1_2_1_q.equals(syntax))
				emit_ShortClassDefinition_ColonKeyword_3_1_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Statement_BreakKeyword_0_2_or_ReturnKeyword_0_3.equals(syntax))
				emit_Statement_BreakKeyword_0_2_or_ReturnKeyword_0_3(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '.'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'if' (ambiguity) idents+=IDENT
	 *     (rule start) (ambiguity) idents+=IDENT
	 *     idents+=IDENT (ambiguity) idents+=IDENT
	 *     subscripts+=ArraySubscripts (ambiguity) idents+=IDENT
	 */
	protected void emit_ComponentReference_FullStopKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('external' ';')?
	 *
	 * This ambiguous syntax occurs at:
	 *     alg_secs+=AlgorithmSection (ambiguity) (rule end)
	 *     alg_secs+=AlgorithmSection (ambiguity) anno=Annotation
	 *     eq_secs+=EquationSection (ambiguity) (rule end)
	 *     eq_secs+=EquationSection (ambiguity) anno=Annotation
	 *     priv_elist=ElementList (ambiguity) (rule end)
	 *     priv_elist=ElementList (ambiguity) anno=Annotation
	 *     protected_elist+=ElementList (ambiguity) (rule end)
	 *     protected_elist+=ElementList (ambiguity) anno=Annotation
	 *     pub_elist+=ElementList (ambiguity) (rule end)
	 *     pub_elist+=ElementList (ambiguity) anno=Annotation
	 */
	protected void emit_Composition___ExternalKeyword_2_0_SemicolonKeyword_2_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'each'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'final'? 'replaceable' ClassPrefixes IDENT '=' 'enumeration' '(' ':'? ')' comment=Comment
	 *     (rule start) (ambiguity) 'final'? 'replaceable' ClassPrefixes IDENT '=' 'enumeration' '(' list=EnumList
	 *     (rule start) (ambiguity) 'final'? 'replaceable' ClassPrefixes IDENT '=' BasePrefix Name '[' subscripts+=Subscript
	 *     (rule start) (ambiguity) 'final'? 'replaceable' ClassPrefixes IDENT '=' BasePrefix Name comment=Comment
	 *     (rule start) (ambiguity) 'final'? 'replaceable' ClassPrefixes IDENT '=' BasePrefix Name mode=ClassModification
	 *     (rule start) (ambiguity) 'final'? 'replaceable' prefix=TypePrefix
	 *     (rule start) (ambiguity) 'final'? name=Name
	 */
	protected void emit_ElementModicationOrReplaceable_EachKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('each'? 'final'? 'replaceable'?) | ('redeclare' 'each'? 'final'? 'replaceable'?)
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ClassPrefixes IDENT '=' 'enumeration' '(' ':'? ')' comment=Comment
	 *     (rule start) (ambiguity) ClassPrefixes IDENT '=' 'enumeration' '(' list=EnumList
	 *     (rule start) (ambiguity) ClassPrefixes IDENT '=' BasePrefix Name '[' subscripts+=Subscript
	 *     (rule start) (ambiguity) ClassPrefixes IDENT '=' BasePrefix Name comment=Comment
	 *     (rule start) (ambiguity) ClassPrefixes IDENT '=' BasePrefix Name mode=ClassModification
	 *     (rule start) (ambiguity) prefix=TypePrefix
	 */
	protected void emit_ElementModicationOrReplaceable_ElementRedeclaration_ElementReplaceable___EachKeyword_0_q_FinalKeyword_1_q_ReplaceableKeyword_0_q___or___RedeclareKeyword_0_EachKeyword_1_q_FinalKeyword_2_q_ReplaceableKeyword_0_q__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'final'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'each'? (ambiguity) 'replaceable' ClassPrefixes IDENT '=' 'enumeration' '(' ':'? ')' comment=Comment
	 *     (rule start) 'each'? (ambiguity) 'replaceable' ClassPrefixes IDENT '=' 'enumeration' '(' list=EnumList
	 *     (rule start) 'each'? (ambiguity) 'replaceable' ClassPrefixes IDENT '=' BasePrefix Name '[' subscripts+=Subscript
	 *     (rule start) 'each'? (ambiguity) 'replaceable' ClassPrefixes IDENT '=' BasePrefix Name comment=Comment
	 *     (rule start) 'each'? (ambiguity) 'replaceable' ClassPrefixes IDENT '=' BasePrefix Name mode=ClassModification
	 *     (rule start) 'each'? (ambiguity) 'replaceable' prefix=TypePrefix
	 *     (rule start) 'each'? (ambiguity) name=Name
	 */
	protected void emit_ElementModicationOrReplaceable_FinalKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'each'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'redeclare' (ambiguity) 'final'? 'replaceable'? ClassPrefixes IDENT '=' 'enumeration' '(' ':'? ')' comment=Comment
	 *     (rule start) 'redeclare' (ambiguity) 'final'? 'replaceable'? ClassPrefixes IDENT '=' 'enumeration' '(' list=EnumList
	 *     (rule start) 'redeclare' (ambiguity) 'final'? 'replaceable'? ClassPrefixes IDENT '=' BasePrefix Name '[' subscripts+=Subscript
	 *     (rule start) 'redeclare' (ambiguity) 'final'? 'replaceable'? ClassPrefixes IDENT '=' BasePrefix Name comment=Comment
	 *     (rule start) 'redeclare' (ambiguity) 'final'? 'replaceable'? ClassPrefixes IDENT '=' BasePrefix Name mode=ClassModification
	 *     (rule start) 'redeclare' (ambiguity) 'final'? 'replaceable'? prefix=TypePrefix
	 */
	protected void emit_ElementRedeclaration_EachKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'final'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'redeclare' 'each'? (ambiguity) 'replaceable'? ClassPrefixes IDENT '=' 'enumeration' '(' ':'? ')' comment=Comment
	 *     (rule start) 'redeclare' 'each'? (ambiguity) 'replaceable'? ClassPrefixes IDENT '=' 'enumeration' '(' list=EnumList
	 *     (rule start) 'redeclare' 'each'? (ambiguity) 'replaceable'? ClassPrefixes IDENT '=' BasePrefix Name '[' subscripts+=Subscript
	 *     (rule start) 'redeclare' 'each'? (ambiguity) 'replaceable'? ClassPrefixes IDENT '=' BasePrefix Name comment=Comment
	 *     (rule start) 'redeclare' 'each'? (ambiguity) 'replaceable'? ClassPrefixes IDENT '=' BasePrefix Name mode=ClassModification
	 *     (rule start) 'redeclare' 'each'? (ambiguity) 'replaceable'? prefix=TypePrefix
	 */
	protected void emit_ElementRedeclaration_FinalKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'replaceable'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'redeclare' 'each'? 'final'? (ambiguity) ClassPrefixes IDENT '=' 'enumeration' '(' ':'? ')' comment=Comment
	 *     (rule start) 'redeclare' 'each'? 'final'? (ambiguity) ClassPrefixes IDENT '=' 'enumeration' '(' list=EnumList
	 *     (rule start) 'redeclare' 'each'? 'final'? (ambiguity) ClassPrefixes IDENT '=' BasePrefix Name '[' subscripts+=Subscript
	 *     (rule start) 'redeclare' 'each'? 'final'? (ambiguity) ClassPrefixes IDENT '=' BasePrefix Name comment=Comment
	 *     (rule start) 'redeclare' 'each'? 'final'? (ambiguity) ClassPrefixes IDENT '=' BasePrefix Name mode=ClassModification
	 *     (rule start) 'redeclare' 'each'? 'final'? (ambiguity) prefix=TypePrefix
	 */
	protected void emit_ElementReplaceable_ReplaceableKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'final'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'redeclare'? (ambiguity) 'inner'? 'outer'? 'replaceable'? ClassPrefixes name=IDENT
	 *     (rule start) 'redeclare'? (ambiguity) 'inner'? 'outer'? 'replaceable'? encapsulated?='encapsulated'
	 *     (rule start) 'redeclare'? (ambiguity) 'inner'? 'outer'? 'replaceable'? prefix=TypePrefix
	 */
	protected void emit_Element_FinalKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'inner'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'redeclare'? 'final'? (ambiguity) 'outer'? 'replaceable'? ClassPrefixes name=IDENT
	 *     (rule start) 'redeclare'? 'final'? (ambiguity) 'outer'? 'replaceable'? encapsulated?='encapsulated'
	 *     (rule start) 'redeclare'? 'final'? (ambiguity) 'outer'? 'replaceable'? prefix=TypePrefix
	 */
	protected void emit_Element_InnerKeyword_2_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'outer'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'redeclare'? 'final'? 'inner'? (ambiguity) 'replaceable'? ClassPrefixes name=IDENT
	 *     (rule start) 'redeclare'? 'final'? 'inner'? (ambiguity) 'replaceable'? encapsulated?='encapsulated'
	 *     (rule start) 'redeclare'? 'final'? 'inner'? (ambiguity) 'replaceable'? prefix=TypePrefix
	 */
	protected void emit_Element_OuterKeyword_2_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'redeclare'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'final'? 'inner'? 'outer'? 'replaceable'? ClassPrefixes name=IDENT
	 *     (rule start) (ambiguity) 'final'? 'inner'? 'outer'? 'replaceable'? encapsulated?='encapsulated'
	 *     (rule start) (ambiguity) 'final'? 'inner'? 'outer'? 'replaceable'? prefix=TypePrefix
	 */
	protected void emit_Element_RedeclareKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'replaceable'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'redeclare'? 'final'? 'inner'? 'outer'? (ambiguity) ClassPrefixes name=IDENT
	 *     (rule start) 'redeclare'? 'final'? 'inner'? 'outer'? (ambiguity) encapsulated?='encapsulated'
	 *     (rule start) 'redeclare'? 'final'? 'inner'? 'outer'? (ambiguity) prefix=TypePrefix
	 */
	protected void emit_Element_ReplaceableKeyword_2_4_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '^' | '.^'
	 *
	 * This ambiguous syntax occurs at:
	 *     {Factor.base=} (ambiguity) exp=Primary
	 */
	protected void emit_Factor_CircumflexAccentKeyword_1_1_0_or_FullStopCircumflexAccentKeyword_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'der' | 'initial'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'if' (ambiguity) args=FunctionCallArgs
	 *     (rule start) (ambiguity) args=FunctionCallArgs
	 */
	protected void emit_FunctionCall_DerKeyword_0_1_or_InitialKeyword_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'else'?
	 *
	 * This ambiguous syntax occurs at:
	 *     elseif_eqs+=Equation ';' (ambiguity) 'end' 'if' (rule end)
	 *     elseif_eqs+=Equation ';' (ambiguity) 'end' 'if' commment=Comment
	 *     elsif_exprs+=Expression 'then' (ambiguity) 'end' 'if' (rule end)
	 *     elsif_exprs+=Expression 'then' (ambiguity) 'end' 'if' commment=Comment
	 *     if_eqs+=Equation ';' (ambiguity) 'end' 'if' (rule end)
	 *     if_eqs+=Equation ';' (ambiguity) 'end' 'if' commment=Comment
	 *     if_expr=Expression 'then' (ambiguity) 'end' 'if' (rule end)
	 *     if_expr=Expression 'then' (ambiguity) 'end' 'if' commment=Comment
	 */
	protected void emit_IfEquation_ElseKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'else'?
	 *
	 * This ambiguous syntax occurs at:
	 *     elseif_exprs+=Expression 'then' (ambiguity) 'end' 'if' (rule end)
	 *     elseif_exprs+=Expression 'then' (ambiguity) 'end' 'if' comment=Comment
	 *     elseif_stmts+=Statement ';' (ambiguity) 'end' 'if' (rule end)
	 *     elseif_stmts+=Statement ';' (ambiguity) 'end' 'if' comment=Comment
	 *     if_expr=Expression 'then' (ambiguity) 'end' 'if' (rule end)
	 *     if_expr=Expression 'then' (ambiguity) 'end' 'if' comment=Comment
	 *     if_stmts+=Statement ';' (ambiguity) 'end' 'if' (rule end)
	 *     if_stmts+=Statement ';' (ambiguity) 'end' 'if' comment=Comment
	 */
	protected void emit_IfStatement_ElseKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'import' Name (ambiguity) '(' list=ImportList
	 */
	protected void emit_ImportClause_CommaKeyword_1_1_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (','? '*')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'import' Name (ambiguity) comment=Comment
	 */
	protected void emit_ImportClause___CommaKeyword_1_1_1_0_q_AsteriskKeyword_1_1_1_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     exprs+=Expression (ambiguity) (rule end)
	 */
	protected void emit_OutputExpressionList_CommaKeyword_2_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) exprs+=Expression
	 *     exprs+=Expression (ambiguity) exprs+=Expression
	 */
	protected void emit_OutputExpressionList_CommaKeyword_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ':'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'each'? 'final'? 'replaceable' ClassPrefixes IDENT '=' 'enumeration' '(' (ambiguity) ')' comment=Comment
	 *     (rule start) 'redeclare' 'each'? 'final'? 'replaceable'? ClassPrefixes IDENT '=' 'enumeration' '(' (ambiguity) ')' comment=Comment
	 *     (rule start) 'replaceable' ClassPrefixes IDENT '=' 'enumeration' '(' (ambiguity) ')' comment=Comment
	 *     (rule start) (('each'? 'final'? 'replaceable'?) | ('redeclare' 'each'? 'final'? 'replaceable'?)) ClassPrefixes IDENT '=' 'enumeration' '(' (ambiguity) ')' comment=Comment
	 *     (rule start) ClassPrefixes IDENT '=' 'enumeration' '(' (ambiguity) ')' comment=Comment
	 */
	protected void emit_ShortClassDefinition_ColonKeyword_3_1_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'break' | 'return'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) comment=Comment
	 */
	protected void emit_Statement_BreakKeyword_0_2_or_ReturnKeyword_0_3(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
