/**
 * generated by Xtext 2.9.2
 */
package xmodelica.modelica.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xmodelica.modelica.Expression;
import xmodelica.modelica.ForIndex;
import xmodelica.modelica.FunctionArgument;
import xmodelica.modelica.ModelicaPackage;
import xmodelica.modelica.NamedArguments;
import xmodelica.modelica.Subscript;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xmodelica.modelica.impl.ExpressionImpl#getName <em>Name</em>}</li>
 *   <li>{@link xmodelica.modelica.impl.ExpressionImpl#getArgs <em>Args</em>}</li>
 *   <li>{@link xmodelica.modelica.impl.ExpressionImpl#getIf <em>If</em>}</li>
 *   <li>{@link xmodelica.modelica.impl.ExpressionImpl#getThen <em>Then</em>}</li>
 *   <li>{@link xmodelica.modelica.impl.ExpressionImpl#getElseif <em>Elseif</em>}</li>
 *   <li>{@link xmodelica.modelica.impl.ExpressionImpl#getElseifthen <em>Elseifthen</em>}</li>
 *   <li>{@link xmodelica.modelica.impl.ExpressionImpl#getElse <em>Else</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends ConditionAttributeImpl implements Expression
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getArgs() <em>Args</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgs()
   * @generated
   * @ordered
   */
  protected NamedArguments args;

  /**
   * The cached value of the '{@link #getIf() <em>If</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIf()
   * @generated
   * @ordered
   */
  protected Expression if_;

  /**
   * The cached value of the '{@link #getThen() <em>Then</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThen()
   * @generated
   * @ordered
   */
  protected Expression then;

  /**
   * The cached value of the '{@link #getElseif() <em>Elseif</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseif()
   * @generated
   * @ordered
   */
  protected EList<Expression> elseif;

  /**
   * The cached value of the '{@link #getElseifthen() <em>Elseifthen</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseifthen()
   * @generated
   * @ordered
   */
  protected EList<Expression> elseifthen;

  /**
   * The cached value of the '{@link #getElse() <em>Else</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElse()
   * @generated
   * @ordered
   */
  protected EList<Expression> else_;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ModelicaPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaPackage.EXPRESSION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NamedArguments getArgs()
  {
    return args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArgs(NamedArguments newArgs, NotificationChain msgs)
  {
    NamedArguments oldArgs = args;
    args = newArgs;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaPackage.EXPRESSION__ARGS, oldArgs, newArgs);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setArgs(NamedArguments newArgs)
  {
    if (newArgs != args)
    {
      NotificationChain msgs = null;
      if (args != null)
        msgs = ((InternalEObject)args).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaPackage.EXPRESSION__ARGS, null, msgs);
      if (newArgs != null)
        msgs = ((InternalEObject)newArgs).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaPackage.EXPRESSION__ARGS, null, msgs);
      msgs = basicSetArgs(newArgs, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaPackage.EXPRESSION__ARGS, newArgs, newArgs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getIf()
  {
    return if_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIf(Expression newIf, NotificationChain msgs)
  {
    Expression oldIf = if_;
    if_ = newIf;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaPackage.EXPRESSION__IF, oldIf, newIf);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIf(Expression newIf)
  {
    if (newIf != if_)
    {
      NotificationChain msgs = null;
      if (if_ != null)
        msgs = ((InternalEObject)if_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaPackage.EXPRESSION__IF, null, msgs);
      if (newIf != null)
        msgs = ((InternalEObject)newIf).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaPackage.EXPRESSION__IF, null, msgs);
      msgs = basicSetIf(newIf, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaPackage.EXPRESSION__IF, newIf, newIf));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getThen()
  {
    return then;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetThen(Expression newThen, NotificationChain msgs)
  {
    Expression oldThen = then;
    then = newThen;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaPackage.EXPRESSION__THEN, oldThen, newThen);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setThen(Expression newThen)
  {
    if (newThen != then)
    {
      NotificationChain msgs = null;
      if (then != null)
        msgs = ((InternalEObject)then).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaPackage.EXPRESSION__THEN, null, msgs);
      if (newThen != null)
        msgs = ((InternalEObject)newThen).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaPackage.EXPRESSION__THEN, null, msgs);
      msgs = basicSetThen(newThen, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaPackage.EXPRESSION__THEN, newThen, newThen));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getElseif()
  {
    if (elseif == null)
    {
      elseif = new EObjectContainmentEList<Expression>(Expression.class, this, ModelicaPackage.EXPRESSION__ELSEIF);
    }
    return elseif;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getElseifthen()
  {
    if (elseifthen == null)
    {
      elseifthen = new EObjectContainmentEList<Expression>(Expression.class, this, ModelicaPackage.EXPRESSION__ELSEIFTHEN);
    }
    return elseifthen;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getElse()
  {
    if (else_ == null)
    {
      else_ = new EObjectContainmentEList<Expression>(Expression.class, this, ModelicaPackage.EXPRESSION__ELSE);
    }
    return else_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ModelicaPackage.EXPRESSION__ARGS:
        return basicSetArgs(null, msgs);
      case ModelicaPackage.EXPRESSION__IF:
        return basicSetIf(null, msgs);
      case ModelicaPackage.EXPRESSION__THEN:
        return basicSetThen(null, msgs);
      case ModelicaPackage.EXPRESSION__ELSEIF:
        return ((InternalEList<?>)getElseif()).basicRemove(otherEnd, msgs);
      case ModelicaPackage.EXPRESSION__ELSEIFTHEN:
        return ((InternalEList<?>)getElseifthen()).basicRemove(otherEnd, msgs);
      case ModelicaPackage.EXPRESSION__ELSE:
        return ((InternalEList<?>)getElse()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ModelicaPackage.EXPRESSION__NAME:
        return getName();
      case ModelicaPackage.EXPRESSION__ARGS:
        return getArgs();
      case ModelicaPackage.EXPRESSION__IF:
        return getIf();
      case ModelicaPackage.EXPRESSION__THEN:
        return getThen();
      case ModelicaPackage.EXPRESSION__ELSEIF:
        return getElseif();
      case ModelicaPackage.EXPRESSION__ELSEIFTHEN:
        return getElseifthen();
      case ModelicaPackage.EXPRESSION__ELSE:
        return getElse();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ModelicaPackage.EXPRESSION__NAME:
        setName((String)newValue);
        return;
      case ModelicaPackage.EXPRESSION__ARGS:
        setArgs((NamedArguments)newValue);
        return;
      case ModelicaPackage.EXPRESSION__IF:
        setIf((Expression)newValue);
        return;
      case ModelicaPackage.EXPRESSION__THEN:
        setThen((Expression)newValue);
        return;
      case ModelicaPackage.EXPRESSION__ELSEIF:
        getElseif().clear();
        getElseif().addAll((Collection<? extends Expression>)newValue);
        return;
      case ModelicaPackage.EXPRESSION__ELSEIFTHEN:
        getElseifthen().clear();
        getElseifthen().addAll((Collection<? extends Expression>)newValue);
        return;
      case ModelicaPackage.EXPRESSION__ELSE:
        getElse().clear();
        getElse().addAll((Collection<? extends Expression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ModelicaPackage.EXPRESSION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ModelicaPackage.EXPRESSION__ARGS:
        setArgs((NamedArguments)null);
        return;
      case ModelicaPackage.EXPRESSION__IF:
        setIf((Expression)null);
        return;
      case ModelicaPackage.EXPRESSION__THEN:
        setThen((Expression)null);
        return;
      case ModelicaPackage.EXPRESSION__ELSEIF:
        getElseif().clear();
        return;
      case ModelicaPackage.EXPRESSION__ELSEIFTHEN:
        getElseifthen().clear();
        return;
      case ModelicaPackage.EXPRESSION__ELSE:
        getElse().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ModelicaPackage.EXPRESSION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ModelicaPackage.EXPRESSION__ARGS:
        return args != null;
      case ModelicaPackage.EXPRESSION__IF:
        return if_ != null;
      case ModelicaPackage.EXPRESSION__THEN:
        return then != null;
      case ModelicaPackage.EXPRESSION__ELSEIF:
        return elseif != null && !elseif.isEmpty();
      case ModelicaPackage.EXPRESSION__ELSEIFTHEN:
        return elseifthen != null && !elseifthen.isEmpty();
      case ModelicaPackage.EXPRESSION__ELSE:
        return else_ != null && !else_.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == ForIndex.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == FunctionArgument.class)
    {
      switch (derivedFeatureID)
      {
        case ModelicaPackage.EXPRESSION__NAME: return ModelicaPackage.FUNCTION_ARGUMENT__NAME;
        case ModelicaPackage.EXPRESSION__ARGS: return ModelicaPackage.FUNCTION_ARGUMENT__ARGS;
        default: return -1;
      }
    }
    if (baseClass == Subscript.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == ForIndex.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == FunctionArgument.class)
    {
      switch (baseFeatureID)
      {
        case ModelicaPackage.FUNCTION_ARGUMENT__NAME: return ModelicaPackage.EXPRESSION__NAME;
        case ModelicaPackage.FUNCTION_ARGUMENT__ARGS: return ModelicaPackage.EXPRESSION__ARGS;
        default: return -1;
      }
    }
    if (baseClass == Subscript.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ExpressionImpl
