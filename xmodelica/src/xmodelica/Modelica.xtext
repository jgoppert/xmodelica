grammar xmodelica.Modelica hidden(WS, ML_COMMENT, SL_COMMENT)

generate modelica "http://www.Modelica.xmodelica"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//-----------------------------------------------
// B.2.1 Stored Definition
//-----------------------------------------------

StoredDefinition:
	('within' within=Name ';')?
	(classes+=ClassDefinitionWithFinal ';' )*
;

//-----------------------------------------------
// B.2.1 Class Definition
//-----------------------------------------------

ClassDefinitionWithFinal returns ClassDefinition:
	(final?='final')?
	(encapsulated?='encapsulated')?
	ClassPrefixes
	ClassSpecifier
;

ClassDefinition:
	(encapsulated?='encapsulated')?
	ClassPrefixes
	ClassSpecifier
;

ClassPrefixes returns ecore::EString:
	'partial'?
	('class'
		| 'model'
		| 'operator'? 'record'
		| 'block'
		| 'expandable'? 'connector'
		| 'type'
		| 'package'
		| ('pure' | 'impure')? 'operator'? 'function'
		| 'operator'
	)
;

ClassSpecifier returns ClassDefinition:
	name=IDENT comment=StringComment composition=Composition 'end' name_end=IDENT
	//| IDENT '=' BasePrefix Name ArraySubscripts? mod=ClassModification? // TODO Comment
	//| IDENT '=' 'enumeration' '(' ( EnumList? | ':') ')' // TODO Comment
	//| IDENT '=' 'der' '(' Name ',' IDENT (',' IDENT)* ')' Comment
	//| 'extends' type=[ClassDefinition|Name] mod=ClassModification? comment=StringComment composition=Composition 'end' IDENT
;

BasePrefix:
	TypePrefix
;

EnumList:
	enums+=EnumerationLiteral (',' enums+=EnumerationLiteral)*
;

EnumerationLiteral:
	id=IDENT comment=Comment
;

Composition:
	priv_elist=ElementList
	(
		'public' pub_elist+=ElementList
		| 'protected' protected_elist+=ElementList
		| eq_secs+=EquationSection
		| alg_secs+=AlgorithmSection
	)*
	('external'
		ext_lang_spec=LanguageSpecification?
		ext_func_call=ExternalFunctionCall?
		ext_anno=Annotation? ';'
	)?
	(anno=Annotation ';')?
;

LanguageSpecification:
	STRING
;

ExternalFunctionCall:
	(lhs=ComponentReference '=')?
	name=IDENT '(' args=ExpressionList? ')'
;

ElementList:
	{ElementList}
	(elem+=Element ';')*
;

Element:
	ImportClause
	| ExtendsClause
	| 'redeclare'? 'final'? 'inner'? 'outer'?
		( (ClassDefinition | ComponentClause)
			| 'replaceable' (ClassDefinition | ComponentClause)
			// TODO (ConstrainingClause Comment)?
		)
;

ImportClause:
	'import' (id=IDENT '=' name=Name
		| Name (','? ('*' | '(' list=ImportList ')' ) )?) comment=Comment
;

ImportList:
	id=IDENT (',' list=ImportList)?
;

//-----------------------------------------------
// B.2.3 Extends
//-----------------------------------------------
ExtendsClause:
	'extends' name=Name mod=ClassModification? anno=Annotation?
;

ConstrainingClause:
	'constrainedby' name=Name mod=ClassModification?
;

//-----------------------------------------------
// B.2.4 Component Clause
//-----------------------------------------------

ComponentClause:
	prefix=TypePrefix type=TypeSpecifier subs=ArraySubscripts? comps=ComponentList
;

TypePrefix:
	('flow' | 'stream')?
	('discrete' | 'parameter' | 'constant')?
	('input' | 'output')?
;

TypeSpecifier:
	name=[ClassDefinition|Name]
;

ComponentList:
	comps+=ComponentDeclaration (',' comps+=ComponentDeclaration)*
;

ComponentDeclaration:
	decl=Declaration cond=ConditionAttribute? comment=Comment
;

ConditionAttribute:
	'if' Expression
;

Declaration:
	name=IDENT subscripts=ArraySubscripts? mod=Modification?
;


//-----------------------------------------------
// B.2.5 Modification
//-----------------------------------------------

Modification:
	mod=ClassModification ('=' expr=Expression)?
	| '=' expr=Expression
	| ':=' expr=Expression
;

ClassModification:
	{ClassModification}
	"(" args+=ArgumentList? ")"
;

ArgumentList:
	args+=Argument ("," args+=Argument)*
;

Argument:
	ElementModicationOrReplaceable
	| ElementRedeclaration
;

ElementModicationOrReplaceable:
	'each'? 'final'? (ElementModification | ElementReplaceable)
;

ElementModification:
	name=Name mod=Modification? comment=StringComment
;

ElementRedeclaration:
	'redeclare' 'each'? 'final'?
	(
		(ShortClassDefinition | ComponentClause1) | ElementReplaceable
	)
;

ElementReplaceable:
	'replaceable' (ShortClassDefinition | ComponentClause1) const=ConstrainingClause?
;

ComponentClause1:
	prefix=TypePrefix type=TypeSpecifier comp=ComponentDeclaration1
;

ComponentDeclaration1:
	Declaration comment=Comment
;

ShortClassDefinition:
	ClassPrefixes IDENT '='
	(BasePrefix Name ArraySubscripts? mode=ClassModification? comment=Comment |
		'enumeration' '(' ( list=EnumList? | ':') ')' comment=Comment 
	)
;

//-----------------------------------------------
// B.2.6 Equations
//-----------------------------------------------
EquationSection:
	(initial?='initial')? 'equation' (equations+=Equation ';')+
;

AlgorithmSection:
	(initial?='initial')? 'algorithm' (statements+=Statement ';')+
;

Equation:
	(left=SimpleExpression '=' right=Expression
		| IfEquation
		| ForEquation
		| ConnectClause
		| WhenEquation
		// TODO | Name FunctionCallArgs
	)
	commment=Comment
;

Statement:
	((left=ComponentReference
	(':=' right= (Expression | FunctionCallArgs))
	)
	| '(' left=OutputExpressionList ')' ':='
		ref=ComponentReference ref_call=FunctionCallArgs
	| 'break'
	| 'return'
	| IfStatement
	| ForStatement
	| WhileStatement
	| WhenStatement)
	comment=Comment
;

IfEquation:
	'if' if_expr=Expression 'then'
		(if_eqs+=Equation ';')*
	(
		'elseif' elsif_exprs+=Expression 'then'
			(elseif_eqs+=Equation ';')*
	)*
	(
		'else'
			(else_eqs+=Equation ';')*
	)?
	'end' 'if'
;

IfStatement:
	'if' if_expr=Expression 'then'
		(if_stmts+=Statement ';')*
	(
		'elseif' elseif_exprs+=Expression 'then'
			(elseif_stmts+=Statement ';')*
	)*
	(
		'else'
			(else_stmts+=Statement ';')*
	)?
	'end' 'if'
;

ForEquation:
	'for' indices=ForIndices 'loop'
		(eqs+=Equation ';')*
	'end' 'for'
;

ForStatement:
	'for' indices=ForIndices 'loop'
		(stmts+=Statement ';')*
	'end' 'for'
;

ForIndices:
	indices+=ForIndex (',' indices+=ForIndex)*
;

ForIndex:
	id=IDENT ('in' expr=Expression)
;

WhileStatement:
	'while' cond=Expression 'loop'
		(stmts+=Statement ';')*
	'end' 'while'
;

WhenEquation:
	'when' when=Expression 'then'
		(when_eqs+=Equation ';')*
	( 'elsewhen' elsehwhen=Expression 'then'
		(elsewhen_eqs+=Equation ';')
	)
;

WhenStatement:
	'when' when=Expression 'then'
		(when_stmts+=Statement ';')*
	( 'elsewhen' elsehwhen=Expression 'then'
		(elsewhen_stmts+=Statement ';')
	)	
;

ConnectClause:
	'connect' '(' left=ComponentReference ','
		right=ComponentReference ')'
;

//-----------------------------------------------
// B.2.7 Expressions
//-----------------------------------------------

Expression:
	SimpleExpression
	| 'if' if=Expression 'then' then=Expression
	( 'elseif' elseif+=Expression
			'then' elseifthen+=Expression)*
		'else' else+=Expression
;

SimpleExpression:
	LogicalExpression
	(':' {SimpleExpression.exprs += current} exprs+=LogicalExpression 
		(':' exprs+=LogicalExpression)?
	)?
;

LogicalExpression:
	LogicalTerm ({LogicalExpression.terms+=current} 'or' terms+=LogicalTerm)*
;

LogicalTerm:
	LogicalFactor ({LogicalFactor.factors+=current} 'and' factors+=LogicalFactor)*
;

LogicalFactor:
	// TODO (not?='not')?
	Relation
;

Relation:
	ArithmeticExpression ({Relation.left=current} op=RelOp right=ArithmeticExpression)?
;

RelOp:
	"<" | "<=" | ">" | ">=" | "==" | "<>"
;

ArithmeticExpression:
	// TODO ops+=AddOp?
	Term ( {ArithmeticExpression.terms+=current} ops+=AddOp terms+=Term)*
;


AddOp:
	"+" | "-" | ".+" | ".-"
;

Term :
	Factor ({Term.factors+=current} ops+=MulOp factors+=Factor )*
;

MulOp :
	"*" | "/" | ".*" | "./"
;

Factor :
	Primary ({Factor.base=current} ("^" | ".^") exp=Primary )?
;

FloatPrimary:
	val=UNSIGNED_NUMBER
;

StringPrimary:
	val=STRING
;

LogicalPrimary:
	val=TRUE_FALSE
;

End:
	val='end'
;

Primary:
	FloatPrimary
	| StringPrimary
	| LogicalPrimary
	| FunctionCall
	| ComponentReference
	// TODO | "(" OutputExpressionList ")"
	| "[" res+=ExpressionList ( ";" res+=ExpressionList )* "]"
	| "{" FunctionArguments "}"
	| End
;

FunctionCall:
	( comp_ref=[ClassDefinition|Name] | 'der' | 'initial' ) args=FunctionCallArgs
;

Name:
	"."? IDENT ("." IDENT)*
;

ComponentReference:
	('.'? idents+=IDENT subscripts+=ArraySubscripts?)+
;

FunctionCallArgs:
	{FunctionCallArgs}
	'(' res=FunctionArguments? ')'
;

FunctionArguments:
	args+=FunctionArgument
	( ',' args+=FunctionArguments | 'for' indices=ForIndices
	)?
	| NamedArgument
;


NamedArguments:
	args+=NamedArgument ("," args+=NamedArguments)
;

NamedArgument:
	id=IDENT '=' func=FunctionArgument
;

FunctionArgument:
	Expression
	// TODO | 'function' name=Name '(' args=NamedArguments? ')'
;

OutputExpressionList:
	{OuputExpressionList}
	exprs+=Expression? (',' exprs+=Expression?)*
;

ExpressionList:
	exprs+=Expression (',' exprs+=Expression)*
;

ArraySubscripts:
	'[' subscripts+=Subscript
		(',' subscripts+=Subscript)*
	']'
;

Subscript:
	all?=':' | Expression
;

Comment:
	comment=StringComment annotation=Annotation?
;

StringComment:
	(STRING ('+' STRING)*)?
;

Annotation:
	'annotation' ClassModification
;

// terminals
terminal TRUE_FALSE returns ecore::EBoolean:
	('true' | 'false')
;
terminal IDENT returns ecore::EString:
	NONDIGIT ( DIGIT | NONDIGIT )* | Q_IDENT
;
terminal UNSIGNED_NUMBER returns ecore::EFloat:
	UNSIGNED_INTEGER ( "." ( UNSIGNED_INTEGER )? )?
	( ( "e" | "E" ) ( "+" | "-" )? UNSIGNED_INTEGER )?
;
terminal STRING returns ecore::EString:
	"\"" ( S_CHAR | S_ESCAPE )* "\""
;
terminal ML_COMMENT: '/*'->'*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS: (' ' | '\t' | '\r' | '\n')+;
//terminal ANY_OTHER: .;

// terminal fragments
terminal fragment DIGIT: "0".."9";
terminal fragment UNSIGNED_INTEGER: DIGIT+;
terminal fragment S_ESCAPE: "\\" ("'" | "\"" | "?" | "\\" | "a" | "b" | "f" | "n" | "r" | "t" | "v");
terminal fragment Q_IDENT: "’" ( Q_CHAR | S_ESCAPE )* "’";
terminal fragment NONDIGIT: "_" | "a".."z" | "A".."Z";
terminal fragment S_CHAR: !( "\"" | "\\");
terminal fragment Q_CHAR: NONDIGIT | DIGIT | "!" | "#" | "$" | "%" | "&" | "(" | ")" | "*" | "+" | "," |
	"-" | "." | "/" | ":" | ";" | "<" | ">" | "=" | "?" | "@" | "[" | "]" | "^" |
	"{" | "}" | "|" | "~" | " ";